generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "debian-openssl-1.1.x"]
}

datasource db {
  provider          = "sqlserver"
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

model Category {
  id               Int        @id @default(autoincrement())
  name             String
  parentCategory   Int?
  createdAt        DateTime   @default(now())
  updatedAt        DateTime?  @updatedAt
  categories       Category?  @relation("CategoriesToCategories", fields: [parentCategory], references: [id], onDelete: NoAction, onUpdate: NoAction)
  other_Categories Category[] @relation("CategoriesToCategories")
  products         Product[]
}

model Country {
  id        Int       @id @default(autoincrement())
  name      String
  code      String    @unique
  isActive  Boolean   @default(true)
  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt
  users     User[]
}

model User {
  id        Int       @id @default(autoincrement())
  name      String
  phone     String?
  countryId Int
  country   Country   @relation(fields: [countryId], references: [id])
  email     String
  company   String?
  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt
  invoice   Invoice[]
  contacts  Contact[]
}

model Roles {
  id          Int           @id @default(autoincrement())
  name        String        @unique
  createdAt   DateTime      @default(now())
  updatedAt   DateTime?     @updatedAt
  userAdmin   UserAdmin[]
  permissions Permissions[]
}

model Permissions {
  id        Int       @id @default(autoincrement())
  name      String    @unique
  roleId    Int
  role      Roles     @relation(fields: [roleId], references: [id])
  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt
}

model UserAdmin {
  id        Int                   @id @default(autoincrement())
  name      String
  email     String                @unique
  password  String
  createdAt DateTime              @default(now())
  updatedAt DateTime?             @updatedAt
  roleId    Int
  role      Roles                 @relation(fields: [roleId], references: [id])
  isActive  Boolean               @default(true)
  invoices  InvoiceEventHistory[]
}

model Product {
  id          Int       @id @default(autoincrement())
  slug        String
  alt         String
  categoryId  Int
  name        String
  subtitle    String
  desc        String    @db.NVarChar(MAX)
  jsonDetails String    @db.NVarChar(MAX)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime? @updatedAt

  category       Category        @relation(fields: [categoryId], references: [id])
  images         Image[]
  invoiceDetails InvoiceDetail[]
}

model Image {
  id        Int       @id @default(autoincrement())
  productId Int
  url       String
  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt
  products  Product   @relation(fields: [productId], references: [id])
}

model Invoice {
  id             Int                   @id @default(autoincrement())
  userId         Int
  status         String                @default("PENDING")
  statusId       Int?
  message        String?
  invoiceURL     String?
  totalAmount    Int?
  createdAt      DateTime              @default(now())
  updatedAt      DateTime?             @updatedAt
  user           User                  @relation(fields: [userId], references: [id])
  statusR        Status?               @relation(fields: [statusId], references: [id])
  invoiceDetails InvoiceDetail[]
  invoiceEvents  InvoiceEventHistory[]
}

model InvoiceEventHistory {
  id          Int        @id @default(autoincrement())
  invoiceId   Int
  adminUserId Int?
  status      String
  comment     String?
  createdAt   DateTime   @default(now())
  invoice     Invoice    @relation(fields: [invoiceId], references: [id])
  adminUser   UserAdmin? @relation(fields: [adminUserId], references: [id])
}

model InvoiceDetail {
  id        Int       @id @default(autoincrement())
  invoiceId Int
  productId Int
  name      String    @default("")
  quantity  Int
  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt
  invoice   Invoice   @relation(fields: [invoiceId], references: [id])
  product   Product   @relation(fields: [productId], references: [id])
}

model Contact {
  id          Int       @id @default(autoincrement())
  userId      Int
  statusId    Int?
  name        String
  phone       String?
  email       String
  company     String?
  equipment   String?
  contactType String    @default("CONTACT")
  message     String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime? @updatedAt

  user   User    @relation(fields: [userId], references: [id])
  status Status? @relation(fields: [statusId], references: [id])
}

model Status {
  id        Int       @id @default(autoincrement())
  name      String    @unique
  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt
  invoices  Invoice[]
  contacts  Contact[]
}
